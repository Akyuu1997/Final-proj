#this R code is designed to analysis the relation between goods 
#and attempted to recommand goods based on the goods purchased by customers
#1.packages import
#2.matrixs about goods and customers
#3.summarise customers group
#4.basket analysis

#import packages
packages = c(
  "dplyr","ggplot2","googleVis","devtools","magrittr","slam","irlba","plotly",
  "arules","arulesViz","Matrix","recommenderlab")
existing = as.character(installed.packages()[,1])
for(pkg in packages[!(packages %in% existing)]) install.packages(pkg)

#library packages
rm(list=ls(all=TRUE))
LOAD = TRUE
library(dplyr)
library(ggplot2)
library(googleVis)
library(Matrix)
library(slam)
library(irlba)
library(plotly)
library(arules)
library(arulesViz)
library(recommenderlab)

#import data 
load("data/tf0.rdata")
A = A0; X = X0; Z = Z0; rm(A0,X0,Z0); gc()

#make customer product matrixs
Z = subset(Z, cust %in% A$cust)
n_distinct(Z$cust)  # 32241
n_distinct(Z$prod)  # 23787
library(Matrix)
library(slam)
cpm = xtabs(~ cust + prod, Z, sparse=T)  # customer product matrix
dim(cpm)             # 32241 23787

#delete the products cpm less than 6
cpm = cpm[, colSums(cpm) >= 6]      # remove the least frequent products
# cpm = cpm[rowSums(cpm) > 0, ]     # remove non-buying customers
cpm = cpm[, order(-colSums(cpm))]   # order product by frequency
dim(cpm)                            # 32241 23787>14621
# table(cpm@x) %>% prop.table %>% round(4) %>% head(10) 

#summarize customers by usual products
nop= 400  # no. product = no. variables 
k = 200   # no. cluster
set.seed(111); 
kg = kmeans(cpm[,1:nop], k)$cluster
table(kg) %>% as.vector %>% sort    

#joint group summary into customer dataframe
df = A %>% inner_join(data.frame(
  cust = as.integer(rownames(cpm)), 
  kg) )
head(df)  # 32241

#compute average feature
df = data.frame(
  aggregate(. ~ kg, df[,c(2:7,10)], mean), # averages
  size = as.vector(table(kg)),   # no. customers in the group
  dummy = 2001                   # dummy column for googleViz
  )
head(df)

#inactive bubble plot
library(googleVis)
op <- options(gvis.plot.tag='chart')
plot( gvisMotionChart(
  subset(df[,c(1,4,5,6,8,2,3,7,9)], 
         size >= 20 & size <= 1000),  # range of group size 
  "kg", "dummy", options=list(width=800, height=600) ) )
## Set options back to original options
## options(op)

# use global variables: cpm, kg
Sig = function(gx, P=1000, H=10) {
  print(sprintf("Group %d: No. Customers = %d", gx, sum(kg==gx)))
  bx = cpm[,1:P]
  data.frame(n = col_sums(bx[kg==gx,])) %>%      # frequency
    mutate(
      share = round(100*n/col_sums(bx),2),       # %prod sold to this cluster
      conf = round(100*n/sum(kg==gx),2),         # %buy this product, given cluster
      base = round(100*col_sums(bx)/nrow(bx),2), # %buy this product, all cust 
      lift = round(conf/base,1),                 # conf/base  
      name = colnames(bx)                        # name of prod
    ) %>% arrange(desc(lift)) %>% head(H)
  }
  Sig(130)

#feature engineer for customer(products) 
library(irlba)
if(LOAD) {
  load("data/svd2a.rdata")
} else {
  smx = cpm
  smx@x = pmin(smx@x, 2)            # cap at 2, similar to normalization  
  t0 = Sys.time()
  svd = irlba(smx, 
              nv=400,               # length of feature vector
              maxit=800, work=800)    
  print(Sys.time() - t0)            # 1.8795 mins
  save(svd, file = "data/svd2a.rdata")
}

#group by feature vector
set.seed(111); kg = kmeans(svd$u, 200)$cluster
table(kg) %>% as.vector %>% sort

# clustster summary
df = inner_join(A, data.frame(         
  cust = as.integer(rownames(cpm)), kg)) %>% 
  group_by(kg) %>% summarise(
    avg_frequency = mean(f),
    avg_monetary = mean(m),
    avg_revenue_contr = mean(rev),
    group_size = n(),
    avg_recency = mean(r),
    avg_gross_profit = mean(raw)) %>% 
  ungroup %>% 
  mutate(dummy = 2001, kg = sprintf("G%03d",kg)) %>% 
  data.frame
  ## Joining, by = "cust"

# Google Motion Chart
plot( gvisMotionChart(
  subset(df, group_size >= 20 & group_size <= 1200),     
  "kg", "dummy", options=list(width=800, height=600) ) )

#Baskets Analysis
n_distinct(Z$tid)  #119407
n_distinct(Z$prod) #23787
library(arules)    #library 
library(arulesViz)
bx = as(split(Z$prod, Z$tid), "transactions")   
itemFrequencyPlot(bx, topN=20, type="absolute", cex=0.8) #top 20 freq products

rules = apriori(bx, parameter=list(supp=0.002, conf=0.6)) #setting the rules
summary(rules)
options(digits=4)
inspect(rules)
rules = apriori(bx, parameter=list(supp=0.0003, conf=0.5))

#show the plot
plot(rules,colors=c("red","green"),engine="htmlwidget",
     marker=list(opacity=.6,size=8))
plot(rules,method="matrix",shading="lift",engine="htmlwidget",
     colors=c("red", "green"))

r1 = subset(rules, subset = rhs %in% c("93362993"))
plot(r1,method="graph",engine="htmlwidget",itemCol="cyan") 